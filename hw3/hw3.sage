import time
start_time = time.time()
print "HOMEWORK 3 -  ROBIN GENOLET 227358"

print '-'*5 + " EXERCISE 1 " + '-'*5
###### Exercise 1
n1 = 883949891308313050370047584720072213911966144016512005521362132473365351521301150743679533279237567790673427524850928001464840433333352794478105722400146638606358825929390092319794475646202180880830219621233584916398399250175246215141055871382151115844763941598705166941344764142058293109488995619728329374492890640955511219696480148407597170348484870748059536822784406977675255821431090133815238389254570763231733680844928112456580122051075458325379
p1 = 1024226832045913260549920063499948388352010176338013186191517057186144127413985586874929558089877357030327372496309218294201209944806650377293075857643
q1 = 1354478259836907076393232033486208583690377642756166681223705251492277494733588589164872562075544683767933125235176807397876097769318913104637635510277
r1 = 637176073020751546435125229847860196065699647109253452001021916336598987655948720652753687381701494715173514826750142731579971988287168947403543257589
y1 = 726563710298727460205140153647235199208926789796690305198991032222361569168014559894857372403851050021643093250193865843447307141512908880513614451379032184292606959718170809500955525168367527041233577059985719202000848739023003275451558700830704836576445186349020284695688022462338968425311869098109393291476214724439337839403422801507871979869971266855460387618691844863373651559471555926030691656030232965622792246836053189835187653763588985211857



tmp = Integer(mod(y1, p1).sqrt())
roots_p1 = [tmp, mod(-tmp, p1)]

tmp = Integer(mod(y1, q1).sqrt())
roots_q1 = [tmp, mod(-tmp, q1)]

tmp = Integer(mod(y1, r1).sqrt())
roots_r1 = [tmp, mod(-tmp, r1)]

import itertools

roots_factors = itertools.product(roots_p1, roots_q1, roots_r1)
roots = []

for i in roots_factors:
    tmp1 = crt(crt(Integer(i[0]), Integer(i[1]), p1, q1), Integer(i[2]), p1*q1, r1)
    roots.append(tmp1)

## because pq, q1 and r1 are prime, we know that they are pairwirse coprime.
## we can thus use the chinese remainder theorem.


roots = sorted(roots)
biggest_root = roots[len(roots)-1]
print "biggest root: Q1=", biggest_root
print "biggest_root^2 == y: ", Integer(power_mod(biggest_root, 2, n1)) - y1 == 0

print '-'*5 + " EXERCISE 2 " + '-'*5

###### Exercise 2
C2 = [75931506778092213656461329326939763876665846403297841602766919994588392802417693847828239693957897524098478195639338536115598824649585782216761680909445482196870477214599863267260577859703588681508469163889101753064126935595392495542522595529773032930566809234214767896240889994935646162572367535102796667036, 51323806174447953762306737797722967420341286003594256594784178130179788902547548378371408205023313611715780588222003806745503518706250223900817327457668543628000968817726025801017719420011388500112933504930754646266825243611223447602077489953425410915358296609021067148808303839468650466232685537569283938192, 36957624466303985003211763088832994908661070851956079324385078283955625709092592346068716240690300087187550622430396726459745776734209109299528552859600905117142979566908878672516410618426264839194080754241876629220503375154021153745340612576951125291629553558836697840826149880063814921213141819747966426891, 20240095206255934463900429550639873782941003717444278520798644757947398582836778112805103595107144802215998635569281146318702435465852601728943564293731582454242086412078244298167529366184908031199229000231157849657991148113855910956576272068474065503599914986685881550183619580438076137106962849260284079249, 69848703884521482547635429429575774533124411001884125033930604898710761603987104650160632817248206881025042503814139688212350030928274274736027796141998508766381372233425289927243169514397581047397668179303153696005441286011161950667223567622342476291086968774386342697959937967456977750301704968008916823351, 57149498731094570944258892411550828579845499781795649741723919984392905222294701153771905764703385524890517639389043666245417992275472661320174992538107783813973043811483411100389890838954687221420389552711273048678142644360589804346595603106728535182833451955699808198089000711437209404115179307087659959018, 19308114520410508057224590421725973056750412548734951438650979107094709771508859321042322902650442784062314946839619563944169383587493515317465374668179766425927791896865591134639720440035750628943775043208301082043152020110420319311675724730287909409755218522446977223599708008789153351931427467827259811932, 64721573445070909508827492628215973290114099962348420334878186870257295964995648641104227065106979763299809848557057879238099959432985666963918762017636082720612880186708532897248460164948981034059582144059307106725496511736792841559574622977848692257802846526884753868462054974390623316388298975247459540550, 52630870448162528270062592293856727569376213201385319804989276574865343457243325919682121361451530433434781657417267968581553466315483288457662616805245009163614674811166292099468679803053524133017319634882172848662701367704222629880216888111382343044724019026330172192401117787401516680483103782941523269969, 8307716427736956796019632614207209669093432199281714957432938294680417462927426613597442879636678933937467343668801394166112373122724785723174776330293746270423691989481214082850785514809446019144526908657027148847040597021067756387630948953519729036093799023280704374578223970052583933222699766045975928954, 66530691585527338454196645789668696708657767206669950621834453916512079846997170503503424143687457472049364358569671707972164302742484911872681249059158750795986025951997190101256991143127070118791563364470715774047920629939044031739737119237907335831216515369045936081812877762791317210164168445170547017355, 78219412371918989058495650619183966145014966907765063719300961177552181953899185105057516976019109641071496111517052067537662899815890583436393780377046194621111689414806998839079757818411667537187845204366187581201001134869229398589425680784749411508986282027360594489781117984589364358117585682031614074796, 68622361386025707770378414918129210075135287993452558909806860088978077792818783057363827769610852219378616646729949358083715369108059748918475597692609974006271295605345625438764782665989540890386040748904139036610320943107676754560326430563065804192109450898219817859196669583303219497894772007125962853542, 64555762856216593263932887207219291229619322237351806997379460995493881280544767503934835405912015371563321211119310530919051573331164307535904536012863020253911609290365352843772666824641220901276562932738049940526846027987010521217044597280290038773780244272534450253914991977276850488771401371234430527797, 2638121318965373284764229425195819953988903950292235906164614622772829645700310523343069223335505746215670613557401807318231885017507367750616090494060511360216783147529159158467732820804998710247217952894347672834189025775244893248459213716734367980266153547989825290996322422974580155092034851139598856410, 73714048565496808327545804462644716888551259395664032871655047280604387419271468191766510646837170454766640288807386053336152592595845490751366774089694007061737657956354603924698592547258859327466393535264554467839237541245934911590202654799597838562113374733468085555803618088836125580281002901106588094023, 28995650936881702008193551396471661541674109110441671644556665942346448496150051165866635781105973977941568133416363236864964038468478886146377147025444673547936200814231566096060851919329719869215581589974149239453043014755807915456859589470970046116929543602246310024151752462482800118971933017533905618683, 65837957455098778477223863332047552195790902336648926777351532230948450317981244215686953344108907157955323501760294260872989011568726229055292487863481219403338755131756609336886903002556828349635585917221738209023317064031054316010544988166521731314012036862638804621084941269569505137960567471005820762909, 31293892959188199565591008540035406302128389470366023956951028206873701183136340557475465722381283376657113969394133762569197184569808560120904183584532675342213344143444963683612603860203906075284925080020735349640346250564862841650882414629054668453597382202614087100667097530399059620190814551973980163941, 17912063209969010721355999885645616463709657286744337333422222333387905045175406864921193099885211390369052652644358539442578005247837604950217970764544674234456915905513624390869507402374810926203428122010849351538493374387188930633621851755797304320297504241839559419272842500469159694574034554911587195907, 57414542224314798277919285619564726061526655766692708184421621651079073914415664636631140183253363086235694624917654248117432154486819875776110831032215348915938367692895001527591609046870710896697727056335023440873805061142458913016945820813989396236394566685394382520007725403431954176571384212288670671029, 5956818849333859325684852009357705713116746708743217872077187415887077781257809915018514645039672068434331505871906618760950531421670244258125466329820643603775773507029148841875770094683433081482815385791980752350492662068761622061056171136307387312846462829465905500551242476948369077981483431582713528208, 47014972570243187882238018757928148141476069652364623464991669268092864348115071968398628808208954501150192374167737822500997356088412409593545927529996267054747711680767255221404655154631034590224982431970029222386740223206612809525744493210313794434718138962208518271375593775521241978400175647060591397329, 51442800567630883685778117663965937932093438623728602070118674145235779724970056392587535085228707212370586141830051378580744509378269782857356105743372539216290657344278445406495065020217576556145258559651749800437476365496883327890544567845089567679190617047808261933974301090790018186183801219406288759276, 72027290119583317380229361059415061746610219925713443312981686234789639999447194287755958897643383433437961899293420546666509799777865621526739592424540336778894763816395101430117637669625093832081260436238944355723278290067902708081221500329879671544064048748298178693357825871053062580293881158108870899745, 97170836775764558834045043543417822393978147655673829483934543626421438674196406249388608207779520921184581327028766520410945771952425917482866072413640072228138606229148108595543383306812724657480902368941853421999804633904417176136766590650596776267467104566855449509511805372333848558563415704183074778050, 15219257693052518671960818901797611592178983329138538033263447868687487132512806231269330420175525129718686566644837580308508795095590295126353213008557934924149747204971936335073348629792065577040261639362053535993482118010863013677178288626888688996523562397588471617591175552138174842470017430984853048124, 55854293715414731221429255052558311288263194481514666051065442306742197635730524574227145902054267888864727996931970770555909919185325073920003510493902062235433848114677108897802003555625652661535131534190063347441055009424167848010507076103005882102316268791191326399067116860021337535009469092363657865048, 76538810709567355445894067302072860205793917418076708213950835745884879657302287352266075059350690490309972411550339556129660135157061282004973213484039356859905906222362535389522379966345836035761152818339927779992986786730324789756152154840317502502920921573909830643925192088648967645153303630313911741154, 5470980772948314575308440371400285357380396912539250132278746797538420259675457232164393533905392425728341083776881540126598033610899147895966084710452942904904936186757227394989979277386020586271601911483306432212937063680311856082575364092489791343158867169030452777918754075798278285362502472481232340451, 98774883483048773026231524204142687203165771567661883378173100739602802817706366631386905929387071681592821360244125985672817662154945552117271019109814223985722258419614324919404587014606542503292144908357895395779736261829206653384128338348099501388691186889375840624488751763793116008117600759447543831818, 77992340726693530489652058438302942135447486007054029901630213607880820759084389597903746643951126034393125261577998468626601002245878554987217455920601996803304004297043614594774527341169112796857080412292510671884661701756832402428219672285118580388479387709796827655393866408401859146430436649166799664478, 82736988699755293445657349079995707997397685399848426339583131732088671547733828990477165003459839116151171028266533269944414514088923468796189257396446670028987326462673374293699502033592487021299625820445942033579065889373536907064975512576708533452392877316729900419008691537117361537296842772304109475282, 87109318315263643958514858839117604443322435017743886525086893157540375111325763456070609341976514544579962629465595742499780324673308282002734955548253217265218049592043256791342783356610232408232055151458844833649769851714689083402111355752704134756906135508791937228424891314285709940418623024989999942335, 92099869788661885804420218097250262170044796978331204365550850451016882888739747178945694166833984344907342399941067552032317797994515891905482470482623716939222097210667751520048194972642117333619172482414413955084252886654894743296251542822922116809050514555273959920305735489259840392444612271232929245922, 8379766806391154091648096828877997070674122483762854050442246501670037336128314495572308727386676850712396116525451061558473087478756060285978989887659172751707398468028688276998037527527955638603922822508472543448967729323148429768728478365368729657396346328652420039430433782795323164730138290633613281164, 69848703884521482547635429429575774533124411001884125033930604898710761603987104650160632817248206881025042503814139688212350030928274274736027796141998508766381372233425289927243169514397581047397668179303153696005441286011161950667223567622342476291086968774386342697959937967456977750301704968008916823351, 34738668348396626375852293465637292732013517532295095001528689355282315579048633663806859739196197871813771600617916625065553231622647380025288555778267086450407778976522538566361802909453730310590797864060679882115905666321647043033169386297508151839420618483755548977533621051258602832366170221891832278521, 42439797282601453448988964034261068342747909481789572289543231910463414359172851111762533829421669130045198788722612699700834028290409001545445165057155224490082082539734166592556203900753669527076409915997949075875421226170965875937960337436839320737159315037050342290868893633334152951632437096760063718569, 34738668348396626375852293465637292732013517532295095001528689355282315579048633663806859739196197871813771600617916625065553231622647380025288555778267086450407778976522538566361802909453730310590797864060679882115905666321647043033169386297508151839420618483755548977533621051258602832366170221891832278521, 76342608773653291906907920029351187492934614477247860670879417550766715873749828351280374584906242113928964918062151460658128487282561741810314888617158484084297637447253453214675853418034154562074458343192258835444279006830970860888430760756125242178264295109459271897069709225691944223725497375150050051240, 7512213606986177353860778405996441427245970387777420982945250989437769811970600973755008192049241938414562617747901887794665458345276196926028252934609353501832348994018647630465394997003958787996639957846881188498204520423584696514767716909047133600825890176892306593573661811685385140616414902722322437703, 38828151331406496884500326075435209667795143416454485280719666938900890789677387230101533725382182111078932924226244819428832432525346616033174360165713701264570477511450943785799768898843762957558097707250703767628862820585793748812438122763932348600724882282172324401921334172541389033797294258542152778074, 69288395565581072047576769719945988493134763888254545337808990428332923774480761531985764896367782380030475156776979722808964351082325962738912686579580563057733662844561519866356777886295094914118695644028849038023184374499976078267231446954006848822716095665459681007896691885717536667112107452134841531765, 91203206507198815403428102690557710048438585180080553698383274882233110082084920325887159318391722749757973470335046323368377554504072890963214259067039835611241876798459097096631522150731585441309942623357939398221040960335859657513390661136597215730776541984442170481345873463348868475607601491053416588315, 8307716427736956796019632614207209669093432199281714957432938294680417462927426613597442879636678933937467343668801394166112373122724785723174776330293746270423691989481214082850785514809446019144526908657027148847040597021067756387630948953519729036093799023280704374578223970052583933222699766045975928954, 22234565440366944643073460349792893033141561818051773028974694175404496136401679719770363345176869801205549374936454201962089247706371398943214875827362452533156818851668738638576141316030100006242454143606998708835929089035946637155366988832579733883773196530627210723402514337461385093843239940697498242584, 1725979127093323183411843383945138333747598182303784134879302373310449544762662978846317828387670454996685222956861911649128630629843829477198763431650123465102508059554144873764877058243261913960609831516128656352980169178544623837737487931179757594284873997430736556866320035955415560291964504454239458067, 2638121318965373284764229425195819953988903950292235906164614622772829645700310523343069223335505746215670613557401807318231885017507367750616090494060511360216783147529159158467732820804998710247217952894347672834189025775244893248459213716734367980266153547989825290996322422974580155092034851139598856410, 33589246181268607615848189194662117611646355784166311428874467318608939782801394997529793620961829801385538094881279940399291518576306195348426258916959129508787257594836544022529791757080759307755537000615285333322199799993554128090363664563710785605103038624938043051803311278608715879950633900621834238844, 49292242419508252951216102489206264142977669298001749400004616109861534744927063078200675504221340662463698289069440171374880254272630490377017297957115340735542436698934613380420657291180110574768576909310986160891179634918797546164836165453234650275846559735710128663415449920053646813423883224152299438842, 96819274416567110113111247051944856139755306542877098292768971834860901551521566702215214484389018645591714139929783940436561108408174504768165224036862732354302393919082239636260108117749202243291266882237443111865149207061415850923135224745863318939320580138802887516871750637266300080706487398432676040266, 38968992558436937506664516811341870206696427297526495642957975893580004443289679270994029330387393295862431161814545943303055187297493345895398680178105404039371161160541494328976520617233486358890779790913225611845093579816845613382941403561963555870480902906335899745385981355382777973536380023932671414484, 94733294656768541550745069833821858691495955081947518874452450120231946835725155936595470494705890572612405805637544681041182842472270650029490435548429868259800556749350169962565470772834561786076436239167880160212773292281197479255770299374312372233597301828153822437025642334322580053415613425790485109172, 55018408448586542282953073481660614123130310248210435855886863587342744467939759797880976381881921566614998316510628001784977980391629664528411044277996898315458249600441947532890668140476039502494997615085335782293361552821451452136098835881676363559374617749829782594333211806513364458120918133932039531356, 21740612726191209291502620365890608643817248881873949987373545013741265703116261215532439439738610333779756017337871363098008981847629554675933816212184379219637587667328045173629660353923902617614294546381649549941911713569033982327790892254912907362335236730523037593396480120096499259908769747948673965067, 57414542224314798277919285619564726061526655766692708184421621651079073914415664636631140183253363086235694624917654248117432154486819875776110831032215348915938367692895001527591609046870710896697727056335023440873805061142458913016945820813989396236394566685394382520007725403431954176571384212288670671029, 18929816785166481042416341074006760756240994545775593228321870299855960509475850337260773301822329707318996220359483884078015949133628607032358238607181325198877745453452386182214278478752753347358701389729011445736553046877570437809276797444108415991917008745154995290176930330799278221120217988199392106546, 78219412371918989058495650619183966145014966907765063719300961177552181953899185105057516976019109641071496111517052067537662899815890583436393780377046194621111689414806998839079757818411667537187845204366187581201001134869229398589425680784749411508986282027360594489781117984589364358117585682031614074796, 95982437864536916026577331724251804375248117214266673995815393260976853403313180146338343455619758682149730181690713559799137989614568783528359375010133047784177629931308223291113021906659755766944164871182467674893884574974692671063407349425362193265997930204237215062687233985425908323859007254626946059893, 52117776893534435397082154760897025807384608102030873781593629418703258807543708978975903139464699939844516931281813067833754576984237527978469780375387977981876625790615185151813798250025181339580521211827347046629662311635659695531348688913611050479326725918332568026152297560399300146333129634245136220709, 41457727995692829716976999145566917496980027707954388641436351954978304026011238971527351673475078912579610099917808619888895659611900029452740474874649728797471815317183830303967712563241800019399213296043275339656219261622214687597187477104709277991611971232872891489291285814108288585608323828352762366292, 23519964769736482200075553082259103656435289719616375358515197397786396494855144266782325223948398184671465820323921101126168302798984785224079759261391289730819325991548951241967666902203712064416656526129977591444677844727568776412533069776066248879784850985340888351855035212695949498771962716858592515364]
N2 = 99089519224562690210446498919783326006065036506721078945809382822372627899699035725684585277161585484310260209407279812929984900114847144833856378624450460797242192592111376883691031929631686251348534465073473394219015633936036177591830856907140576327830659642108615910552275097692593513086773636865915900923
e2 = 2726879140069164375914441035962806111081367226240147102024986574159856652867420265271139545385714733552483808873771379333966040646153215116705988861873058987764335087674942217294120196460446436396132662097803658143864036313817903988476844351525653375566810258865850359969828663997975752749968583008403


def encode(string):
    res = 0
    for i in range(len(string)):
        res += ord(string[i]) * 2^(8*i)
    return res

def decode(integer):
    res = []
    sbin = bin(int(integer))
    sbin = sbin[2::]
    while (len(sbin) % 8 != 0):
        sbin = '0' + sbin

    while (len(sbin) > 0):
        char = chr(int(sbin[len(sbin)-8::], 2))
        sbin = sbin[0:len(sbin)-8]
        res.append(char)

    return "".join(res)


print "testing encode/decode:", decode(encode("Red Fox!"))

deciphered = list(C2)

possible_chars = range(ord('A'), ord('a')+26) + [32, 46, 44, 33, 45, 58, 59, 10]
for char1 in possible_chars:
    for char2 in possible_chars:
        m1m2 = chr(char1) + chr(char2)
        encoded = encode(m1m2)
        c = power_mod(encoded, e2, N2)
        for i in range(0, len(C2)):
            if c == C2[i]:
                deciphered[i] = m1m2

result = [[],[],[],[],[],[]]

i = 0
while i < len(deciphered):
    bloc = deciphered[i:i+3]

    index = 0
    for m in range(0, 3):
        for n in range(0, 3):
            for o in range(0, 3):
                if m != n and m != o and n != o:
                    result[index] = result[index] + [bloc[m], bloc[n], bloc[o]]
                    index += 1
    i += 3

print "Q2="
for possibility in result:
    print "".join(possibility)
    print "-"*17



print '-'*5 + " EXERCISE 3 " + '-'*5
###### Exercise 3
n3 = 2190362033585346029718585458032926463448414700022919195878879199077025327924687407245060350004126409868763971577028553041661388840380671154865695065809214670537247828723750369348921215299753207873070853237143962864574893783981946071737909063495356684767779417744872770734231534221212200331255479603927788454169362563
e3 = 65537
c3 = 900369612555831838992777293812876485988841288221953507749490259057602100969440160658879190725875674644464672719389893602914620013711529510182692209930771952304520539899376210776464258649572219683332897234075855605838118932361425992892019726740470474389499611110807060182075211916981049973517769051856427562410707841

def fermatfactor(N):
    if N <= 0: return [N]
    if is_even(N): return [2,N/2]
    a = ceil(sqrt(N))
    while not is_square(a^2-N):
      a = a + 1
    b = sqrt(a^2-N)
    return [a - b,a + b]

## q^2 < 256 + p AND q^2 < p - 256, so we try for q^2 ~ p, this gives n =~ q^3

q_approx = floor(pow(n3, 1/3))
q = 0
for i in range(-256, 257):
    if n3 % (q_approx + i) == 0:
        q = q_approx + i
        break

if (q == 0):
    print "We didn't find p and q :("
else:
    p = n3/q
    phi = (p-1)*(q-1)
    d = inverse_mod(e3, phi)
    m3 = power_mod(c3, d, n3)
    print "Q3=" + decode(m3)


print '-'*5 + " EXERCISE 4 " + '-'*5
###### Exercise 4
p4= 4918684775469538237548134750732731822943099779041585837386850293287458101185678602044415694144239828956053815413462027279148500432446935775245622205886899
g4= 3379990554094091030379867131206471559563784462035096568861451371242768479582945523574250306029087259856653125815164433980258227758989490985795199048333244
y4= 1445619254463726351554847939049852015356220354021732355975384421504372001665651597370459179947270204155523676978639595932213944344785714026010735474098899
u4= 3457563401812640386246254185789104387768740372362223077363450417337572792829593266917892421891216067734902697687781038398901983484433500935761678813480554
v4= 4443834333540825268989318929156682974356653088573772398403193083697277429481736705714834589578492414280009814642204475233921429969549659404173817725125796

# We have that v = m*y^r, so m = m*y^r*y^(-r) = v*y^(-r) (mod p)
# So if we know r we can decypher v4
# We search r s.t. u*g^(-r) = 1


def findR():
    for day in range (12, 21):
        for hour in range (0, 24):
            for minute in range (0, 60):
                r = str(minute) + str(hour) + str(day) + "102016"
                r = int(r)
                if Mod(u4*power_mod(g4, -r, p4), p4) == 1:
                    return r
    raise Exception("r not found")

r = findR()
print "m=v4*y4^(-r) = Q4=" + decode(Integer(Mod(v4 * power_mod(y4, -r, p4), p4)))

#p = 17
#g = 5
#x = 4
#y = power_mod(g, x, p)
#r = 3
#m = 15
#u = power_mod(g, r, p)
#v = Mod(m*power_mod(y, r, p), p)

#print "legit decypher:", Mod(v*power_mod(u, -x, p), p)
#print "decypher knowing r:", decode(Mod(v*power_mod(y, -r, p), p))

print '-'*5 + " EXERCISE 5 " + '-'*5
###### Exercise 5
p5= 7356339268343740060452318988616771967070614481225147292960328994346658694785816418331432452881211325504856891877406343082234371279980390806825502214042839
g5= 2172044033864103633813033778084630050880724439733929544063825477415756593371981892317888108394418357532077950797072105192540216640083690716162612487153831
y5= 4652633200715079251824162775580061653677061688329776241109031045478243630673509398800875831560513408206750187268119184362369204697559658296761646422398105
u51= 1988965834317178564997314482406360978124040495184974061334724441849641966385691501697578347536692218878496606589915979458959948192394412099684284607606680
v51= 564575121584178282254476783945481163298925204611314681816998207672059731280258280246432934516076836450208259998055981445698735976882793347641673858178010
u52= 4138188808987302670693554402617637413559912897266781893082341695326380723137866878346800691437284776338788526589557879226534524353979062715883199179622289
v52= 3440561100079423291001979567991062957873838920726045842834211851923085054868776159273368041740368870241328159890485813915589487231423003658836168716740262
u53= 3324469212207571424125661929988097892123420261188594790964580273494739934452517070824071588250246545202032740911553244404020453322907382153803711814271396
v53= 3148467766738041542768152135977722083214783492391460054820539031883595440501841254034200808727265129392485142821527172421490663442990751358476257717123052
u54= 5389682721010920622946561384864708981062578565947986805801295721117986149415622737019700098589629114976951389606374395276353132021496182203892626169271971
v54= 5899778944779921277176839146782579961432222637213567774912502543499128417854328900702427848711832226401588335536755600543161707819281511407313634473347293
u55= 2150417008059485826933471852883109272479864934902005545876107181427748578236517536747171312175295775787738041212943475739617765648175872372467631599308877
v55= 137761230682034032629315032806854902445037170548084491704743024613468939554676661952220515473190444845172704760206810604547640689556140628102055026737989
u56= 6799656542837690592542179137748931493294379899700483876770358662698604681851615912048817271828066464778742664653520968350469257967911092731276091901603823
v56= 937344317738494495567435615494721214469922996780805007896738205813773537891250762062228659415853611869103091848918828692972669194081038965535560849623019


# We know that m is either 1 or -1.
# Let (a,p) be the jacobi symbol (computed in sage by legendre_symbol(a,p))
# We notice that m = (m/p), because (1/p) = 1 and (-1/p) = -1
# Now, by definition of ElGamal y = g^x mod p. Because 1 = (y/p) = (g/p)^x and (g/p) = -1,
# we know that x must be even. This yields that m = (m/p) = (v/p)*(u/p)^-x = (v/p) * (g/p)^(-rx) = (v/p)

def decode5(v, p):
    return legendre_symbol(v, p)

plaintexts = [decode5(v51, p5), decode5(v52, p5), decode5(v53, p5), decode5(v54, p5), decode5(v55, p5), decode5(v56, p5)]

print "Q5="
print plaintexts

print "-"*5 + " Exec time: " + (str(time.time()-start_time)) + " seconds " + "-"*5
